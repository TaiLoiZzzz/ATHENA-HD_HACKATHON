"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/vikkibank/page",{

/***/ "(app-pages-browser)/./src/services/aiPersonalizationService.ts":
/*!**************************************************!*\
  !*** ./src/services/aiPersonalizationService.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aiPersonalizationService: function() { return /* binding */ aiPersonalizationService; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ aiPersonalizationService auto */ class AIPersonalizationService {\n    async getPersonalizedRecommendations(userProfile, newsItems, availableProducts) {\n        try {\n            const prompt = this.buildPersonalizationPrompt(userProfile, newsItems, availableProducts);\n            console.log(\"Calling Gemini API with prompt:\", prompt);\n            const response = await fetch(\"\".concat(this.baseUrl, \"?key=\").concat(this.apiKey), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    contents: [\n                        {\n                            parts: [\n                                {\n                                    text: prompt\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.8,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 4096\n                    },\n                    safetySettings: [\n                        {\n                            category: \"HARM_CATEGORY_HARASSMENT\",\n                            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n                        },\n                        {\n                            category: \"HARM_CATEGORY_HATE_SPEECH\",\n                            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n                        }\n                    ]\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"API Error Response:\", errorText);\n                throw new Error(\"API Error: \".concat(response.status, \" - \").concat(errorText));\n            }\n            const data = await response.json();\n            console.log(\"Gemini API Response:\", data);\n            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n                throw new Error(\"Invalid API response structure\");\n            }\n            const aiResponse = data.candidates[0].content.parts[0].text;\n            console.log(\"AI Response Text:\", aiResponse);\n            return this.parseAIResponse(aiResponse, availableProducts);\n        } catch (error) {\n            console.error(\"AI Personalization Error:\", error);\n            return this.getFallbackRecommendations(userProfile, availableProducts);\n        }\n    }\n    buildPersonalizationPrompt(userProfile, newsItems, availableProducts) {\n        const newsContext = newsItems.map((item)=>\"- \".concat(item.title, \": \").concat(item.content.substring(0, 100), \"...\")).join(\"\\n\");\n        const productsContext = availableProducts.map((product)=>\"- \".concat(product.name, \" (\").concat(product.serviceType, \"): \").concat(product.price, \" VND, \").concat(product.tokenReward, \" SOV tokens, \").concat(product.category)).join(\"\\n\");\n        return \"\\nBạn l\\xe0 một AI Sales chuy\\xean nghiệp cho hệ thống ATHENA-HD. Nhiệm vụ của bạn l\\xe0 ph\\xe2n t\\xedch th\\xf4ng tin user v\\xe0 đưa ra lời khuy\\xean mua sản phẩm tối ưu h\\xf3a token.\\n\\nTH\\xd4NG TIN USER:\\n- Rank: \".concat(userProfile.rank, \" (\").concat(userProfile.membershipTier, \")\\n- Điểm: \").concat(userProfile.totalPoints, \"\\n- Token đ\\xe3 kiếm: \").concat(userProfile.totalEarned, \" SOV\\n- Token đ\\xe3 chi: \").concat(userProfile.totalSpent, \" SOV\\n- Số dư hiện tại: \").concat(userProfile.currentBalance, \" SOV\\n- ATHENA Prime: \").concat(userProfile.isAthenaPrime ? \"C\\xf3\" : \"Kh\\xf4ng\", \"\\n- Sở th\\xedch: \").concat(userProfile.preferences.join(\", \"), \"\\n\\nTIN TỨC H\\xd4M NAY:\\n\").concat(newsContext, \"\\n\\nSẢN PHẨM C\\xd3 SẴN:\\n\").concat(productsContext, '\\n\\nNHIỆM VỤ:\\n1. Ph\\xe2n t\\xedch rank v\\xe0 lịch sử giao dịch của user\\n2. Xem x\\xe9t tin tức hiện tại để đưa ra lời khuy\\xean ph\\xf9 hợp\\n3. Chọn 3-5 sản phẩm tối ưu nhất cho user\\n4. T\\xednh to\\xe1n token reward v\\xe0 ROI\\n5. Đưa ra lời khuy\\xean c\\xe1 nh\\xe2n h\\xf3a\\n\\nY\\xcaU CẦU ĐẦU RA:\\nTrả về JSON với format:\\n{\\n  \"recommendations\": [\\n    {\\n      \"productId\": \"string\",\\n      \"reason\": \"string\",\\n      \"tokenOptimization\": \"string\", \\n      \"urgency\": \"low|medium|high\",\\n      \"confidence\": 0.0-1.0,\\n      \"personalizedMessage\": \"string\",\\n      \"expectedTokens\": number,\\n      \"roi\": number\\n    }\\n  ]\\n}\\n\\nH\\xe3y đ\\xf3ng vai một sales chuy\\xean nghiệp, th\\xe2n thiện v\\xe0 đưa ra lời khuy\\xean hữu \\xedch!\\n    ');\n    }\n    parseAIResponse(aiResponse, availableProducts) {\n        try {\n            // Extract JSON from AI response\n            const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(\"No JSON found in AI response\");\n            }\n            const parsed = JSON.parse(jsonMatch[0]);\n            const recommendations = parsed.recommendations || [];\n            return recommendations.map((rec)=>{\n                const product = availableProducts.find((p)=>p.id === rec.productId);\n                if (!product) return null;\n                return {\n                    product,\n                    reason: rec.reason || \"AI recommendation\",\n                    tokenOptimization: rec.tokenOptimization || \"Optimized for your tier\",\n                    urgency: rec.urgency || \"medium\",\n                    confidence: rec.confidence || 0.8,\n                    personalizedMessage: rec.personalizedMessage || \"Recommended for you\",\n                    expectedTokens: rec.expectedTokens || product.tokenReward,\n                    roi: rec.roi || 0.15\n                };\n            }).filter(Boolean);\n        } catch (error) {\n            console.error(\"Error parsing AI response:\", error);\n            return [];\n        }\n    }\n    getFallbackRecommendations(userProfile, availableProducts) {\n        // Fallback logic based on user tier and preferences\n        const tierMultiplier = this.getTierMultiplier(userProfile.membershipTier);\n        return availableProducts.filter((product)=>product.tokenReward > 0).sort((a, b)=>b.tokenReward * tierMultiplier - a.tokenReward * tierMultiplier).slice(0, 3).map((product)=>({\n                product,\n                reason: \"Tối ưu cho rank \".concat(userProfile.rank),\n                tokenOptimization: \"Nhận \".concat(product.tokenReward * tierMultiplier, \" SOV tokens\"),\n                urgency: \"medium\",\n                confidence: 0.7,\n                personalizedMessage: \"Ph\\xf9 hợp với rank \".concat(userProfile.rank, \" của bạn\"),\n                expectedTokens: product.tokenReward * tierMultiplier,\n                roi: 0.12\n            }));\n    }\n    getTierMultiplier(tier) {\n        switch(tier.toLowerCase()){\n            case \"diamond\":\n                return 2.0;\n            case \"gold\":\n                return 1.5;\n            case \"silver\":\n                return 1.2;\n            case \"bronze\":\n                return 1.0;\n            default:\n                return 1.0;\n        }\n    }\n    async getNewsAnalysis() {\n        // Mock news data - in real app, this would fetch from news API\n        return [\n            {\n                title: \"VietJet Air mở rộng đường bay quốc tế\",\n                content: \"VietJet Air c\\xf4ng bố mở th\\xeam 5 đường bay quốc tế mới, tăng cơ hội du lịch v\\xe0 kinh doanh\",\n                category: \"travel\",\n                publishedAt: new Date().toISOString(),\n                relevance: 0.9\n            },\n            {\n                title: \"HDBank ra mắt g\\xf3i t\\xe0i khoản premium mới\",\n                content: \"HDBank giới thiệu g\\xf3i t\\xe0i khoản premium với l\\xe3i suất cao v\\xe0 nhiều ưu đ\\xe3i đặc biệt\",\n                category: \"banking\",\n                publishedAt: new Date().toISOString(),\n                relevance: 0.8\n            },\n            {\n                title: \"Sovico Resort khuyến m\\xe3i m\\xf9a h\\xe8\",\n                content: \"Sovico Resort tung ra chương tr\\xecnh khuyến m\\xe3i m\\xf9a h\\xe8 với gi\\xe1 ưu đ\\xe3i v\\xe0 nhiều hoạt động\",\n                category: \"resort\",\n                publishedAt: new Date().toISOString(),\n                relevance: 0.7\n            }\n        ];\n    }\n    async getAvailableProducts() {\n        // Mock products data - in real app, this would fetch from product API\n        return [\n            {\n                id: \"vietjet-flight-001\",\n                name: \"VietJet Air - H\\xe0 Nội đến TP.HCM\",\n                price: 1500000,\n                category: \"flight\",\n                serviceType: \"vietjet\",\n                tokenReward: 150,\n                discount: 10,\n                features: [\n                    \"Baggage included\",\n                    \"Meal service\",\n                    \"Priority boarding\"\n                ],\n                description: \"Chuyến bay nội địa với nhiều ưu đ\\xe3i\"\n            },\n            {\n                id: \"hdbank-premium-001\",\n                name: \"HDBank Premium Account\",\n                price: 500000,\n                category: \"banking\",\n                serviceType: \"hdbank\",\n                tokenReward: 50,\n                features: [\n                    \"High interest rate\",\n                    \"Free transfers\",\n                    \"Priority service\"\n                ],\n                description: \"T\\xe0i khoản premium với nhiều ưu đ\\xe3i\"\n            },\n            {\n                id: \"sovico-resort-001\",\n                name: \"Sovico Resort - Ph\\xfa Quốc\",\n                price: 2500000,\n                category: \"resort\",\n                serviceType: \"sovico\",\n                tokenReward: 250,\n                discount: 15,\n                features: [\n                    \"Beach view\",\n                    \"Spa service\",\n                    \"All inclusive\"\n                ],\n                description: \"Resort cao cấp tại Ph\\xfa Quốc\"\n            }\n        ];\n    }\n    constructor(){\n        this.apiKey = \"AIzaSyBHHB33PBHt8B4c8AkQCqQBCdTLUuKemWs\";\n        this.baseUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent\";\n    }\n}\nconst aiPersonalizationService = new AIPersonalizationService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/aiPersonalizationService.ts\n"));

/***/ })

});